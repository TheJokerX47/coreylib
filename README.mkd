#Getting Started 

##What is coreylib?

coreylib is an XML and JSON parsing and caching library, written in Object-Oriented PHP 5. We like to think of it as a universal API client because it will work with virtually any XML or JSON REST Web service. And it's free, as in free beer (GNU GPL v2).

The coreylib prototyping workflow allows you to quickly develop production-ready mash-ups without the overhead of learning someone else's API client wrapper. Using the response browser built-into coreylib, you can easily inspect and navigate API responses right in the content of your page. Learn to use coreylib the first time through, and you'll look no further for every other mash-up project you ever do.

Other great things about coreylib:

* Supports both HTTP basic authentication and oAuth version 1.0a 
* Automagically converts JSON to XML - only one set of functions to learn
* Use simple, name-based XML document navigation, or XPATH
* Method chaining syntax! 
* Mash-up features use multi_curl = lightning-fast, threaded downloads from APIs
* Caching layer supports MySQL and storing API content on disk (memcached support coming soon!)
* Caching layer can be used to cache any content generated by your application, not just what coreylib downloads

##Requirements

* PHP 5.2+ with [Client URL (cURL) Library](http://www.php.net/manual/en/curl.installation.php) and [SimpleXML](http://www.php.net/manual/en/book.simplexml.php) installed and enabled
* A basic understanding of XML
* A wee-little bit of patience
* A fresh cup of joe

##Getting started

###Step 1: Get the library

To download coreylib, click the *Download Source* button at the top of the [coreylib GitHub project page](http://github.com/collegeman/coreylib).

###Step 2: Add coreylib to your project

Adding coreylib to your PHP project is as easy as including the library into your code.

	<?php
	require_once('coreylib.php');
	
coreylib ships with two viable configuration options: one for generic applications, and one for WordPress. Just rename and tweak the configuration file you want to use - coreylib will find it automatically.

###Step 3: Connect to an API and get some content

These days everyone wants to sample Twitter for content, so weâ€™ll use Twitter as our most basic example.

	// create a new instance of the coreylib clAPI class
	$api = new clAPI('http://twitter.com/statuses/user_timeline.xml?screen_name=collegeman');
 	
	// parse the feed, cache for as long as ten minutes
	// for more options on specifying cache duration, see http://php.net/manual/en/function.strtotime.php
	$api->parse('10 minutes');
	
If parsing fails, <code>clAPI::parse</code> will return <code>FALSE</code>.

If you can't figure out what the problem is, enable debugging somewhere above parsing:

	clAPI::configure('debug', TRUE);

###Step 4: Explore the content, and spit out some data

Every node of the API response has an <code>info()</code> method that you can use to explore the content of the node like a tree.

	// analyze your feed with the info() method:
	$api->info();
	
###Step 5: Get something from the feed

	// the most recent Tweet
	echo $api->get('status[0]')->get('text');
	/* or: */ echo $api->get('status[0]/text');
	
	// the full name of the Twitter user
	echo $api->get('status[0]')->get('user')->get('name');
	/* or: */ echo $api->get('status[0]/user/name');
	
	// coreylib supports attributes too, but Twitter doesn't use them!
	// here's a hypothetical
	echo $api->get('html/body/p/a@href');
	
	// and for the savvy, xpath support
	$not_protected = $api->xpath('//status/user[protected[text()="false"]]'); 

##The coreylib story

So, this dude [@coreyweb](http://twitter.com/coreyweb) has a [personal website](http://coreyweb.com).  He coded it all by himself using PHP, and he was very proud.  Then one day he got it in his head to make his page more dynamic, with streams from *Twitter*, and *Flickr*, and *RSS* from his favorite blogs.

"This will be easy," he thought to himself.  "Why, with all these services providing their own clients, adding those feeds to my site will be a snap!"  But soon, he discovered the truth: *web service API wrappers suck.*

Each service's feed is different, and each client has a unique author.  Nobody is singing from the same sheet, and *none of them* cache their data feeds!

So @coreyweb reached out to this other dude named [@collegeman](http://twitter.com/collegeman), and together they hatched a plan to make things easier.  "Forget having to learn some crazy API wrapper for each new service," they proclaimed. "Let's write a universal web services client with caching built-in!"

Thus, with little fuss, coreylib was born. And now you can use it in your projects for free.

##Contributing to coreylib

coreylib is an open source project licensed under the terms of the GNU GPL v2. You can use it in your own applications, modify it if you need to, but you must release your source code when you distribute coreylib as part of another application.

If you want to contribute directly to the coreylib project, you can find the [project source code](http://github.com/collegeman/coreylib) on GitHub.

Also, if you want us to accept your pull requests, you'll need to force conversion of line endings to LF. At the terminal, run

	git config --global core.autocrlf input
	
For more information on converting line endings automatically, refer to the [GitHub docs](http://help.github.com/dealing-with-lineendings/) on the subject.