#What's a coreylib?

coreylib is a small PHP library for downloading, caching, and searching XML and JSON.

Basically, you give coreylib a URL, and you get back an object that you can use to extract data from the response.

    $rss = coreylib('http://feeds.feedburner.com/github');
    echo $rss->get('title');
    // prints: The GitHub Blog

Did we mention you get to use [jQuery-style CSS selectors](#) to extract the content you want?

#Value-add:

#Requirements

PHP 5.2+ with the [Client URL (cURL) Library](http://www.php.net/manual/en/curl.installation.php),  [SimpleXML](http://www.php.net/manual/en/book.simplexml.php) and/or [JSON](http://www.php.net/manual/en/book.json.php)
extensions installed and enabled.

If you want coreylib to be able to cache, you need one of

1. Write access to the physical file system
2. MySQL
3. Memcached

Memcached is definitely the way to go, if you can swing it. Running Ubuntu?

    apt-get install memcached php5-memcache
    
You can also [write your own caching implementation](#), but only if you wanna.

#Getting started

##Step 1: Get the library

To download coreylib, click the *Download Source* button at the top of the [coreylib GitHub project page](http://github.com/collegeman/coreylib).

##Step 2: Add coreylib to your project

Adding coreylib to your PHP project is as easy as including the library into your code.

    <?php
      require_once('coreylib.php');
      
      // your code goes here:
      
If you're using coreylib with WordPress, you have a couple of options.

1. Drop it in your theme folder, and import it into your `functions.php` file.

2. Drop it in the plugins folder, and activate it from the plugins menu.

##Step 3: Get some data

The easiest place to start is with a familiar stream/schema of data, like RSS or Atom. The GitHub blog should be good for that.

    $api = new clApi('http://feeds.feedburner.com/github');
    if ($feed = $api->parse()) {
      // now we have data...
    } else {
      // something went wrong
    }
    
#The coreylib story

So, this dude [coreyweb](http://about.me/coreyweb) has a [personal website](http://coreyweb.com). He coded it all by himself using PHP, and he was very proud. Then one day he got it in his head to make his page more dynamic, with streams from *Twitter*, and *Flickr*, and *RSS* from his favorite blogs.

"This will be easy," he thought to himself.  "Why, with all these services providing their own clients, adding those feeds to my site will be a snap!"  But soon, he discovered the truth: *web service API wrappers suck.*

Each service's feed is different, and each client has a unique author. Nobody is singing from the same sheet, and *none of them* do any sort of caching... usually.

So coreyweb reached out to this other dude named [collegeman](http://www.facebook.com/home.php?sk=group_127756220636669&ap=1), and together they hatched a plan to make things easier.  "Forget having to learn some crazy API wrapper for each new service," they proclaimed. "Let's write a universal web services client with caching built-in!"

Thus, with little fuss, coreylib was born. And now you can use it in your projects for free.

#Contributing to coreylib

Yes, please.

coreylib is an open source project licensed under the terms of the GNU GPL v2. You can use it in your own applications, modify it if you need to, but you must release your source code when you distribute coreylib as part of another application.

If you want to contribute directly to the coreylib project, you can find the [project source code](http://github.com/collegeman/coreylib) on GitHub.

Also, if you want us to accept your pull requests, you'll need to [force conversion of line endings to LF](http://help.github.com/dealing-with-lineendings/).